__kernel void ve_intersect(__global bool* A, __global bool* B, __global bool* C)
{  
    int idx=get_global_id(0);
    C[idx]=A[idx] & B[idx];
}																	 
__kernel void ve_union(__global bool* A, __global bool* B, __global bool* C)
{
	int idx=get_global_id(0);
	C[idx]=A[idx] | B[idx];
}

/*__kernel void ve(__global int* A,
				__global int* B,
				__global int* param)
{
	int res=0;
	int i_B=start;
	for(int i=start;i<count;i++){
		for(int i_A=0;i_A<length;i_A++,i_B++){
			B[i_B]+=A[i_A];
		}
	}
}*/

__kernel void Ex(__global bool* A_item,
				__global bool* A_T,
				__global bool* B_item,
				__global bool* B_T,
				__global int* param)
{
	//param[0] :res;
	int res=0;
	int item_count=param[1];
	int T_count=param[2];


	for(int i=0;i<item_count;i++){
		B_item[i] |= A_item[i];
	}

	for(int i=0;i<T_count;i++){
		B_T[i] &= A_T[i];
		if(B_T[i])res++;
	}

	param[0]=res;
}